#!/bin/bash

# Test Script for Time-Lock Migration (Sprint 1)
# This script tests the migration on local D1 database

set -e  # Exit on any error

echo "ðŸ§ª Testing Time-Lock Migration (Sprint 1)"
echo "==========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to run D1 command and capture output
run_d1_query() {
    wrangler d1 execute nfl-pickem-db --local --command="$1" 2>/dev/null || echo "Error executing: $1"
}

# Function to print test result
print_result() {
    local test_name="$1"
    local expected="$2"
    local actual="$3"
    
    if [[ "$actual" == "$expected" ]]; then
        echo -e "${GREEN}âœ“ $test_name: $actual${NC}"
    else
        echo -e "${RED}âœ— $test_name: Expected $expected, got $actual${NC}"
    fi
}

echo -e "\n${YELLOW}Step 1: Pre-Migration State${NC}"
echo "=============================="

# Get pre-migration counts
games_count=$(run_d1_query "SELECT COUNT(*) FROM games;")
picks_count=$(run_d1_query "SELECT COUNT(*) FROM picks;")
users_count=$(run_d1_query "SELECT COUNT(*) FROM users;")

echo "Games: $games_count"
echo "Picks: $picks_count" 
echo "Users: $users_count"

# Check if time-lock tables already exist (should not)
game_locks_exists=$(run_d1_query "SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name='game_locks';" || echo "0")
print_result "game_locks table should not exist" "0" "$game_locks_exists"

echo -e "\n${YELLOW}Step 2: Apply Migration${NC}"
echo "========================"

# Apply the migration
echo "Applying migration..."
wrangler d1 execute nfl-pickem-db --local --file=migrations/001_add_time_lock_fields.sql

echo -e "${GREEN}Migration applied successfully!${NC}"

echo -e "\n${YELLOW}Step 3: Post-Migration Validation${NC}"
echo "=================================="

# Verify data preservation
new_games_count=$(run_d1_query "SELECT COUNT(*) FROM games;")
new_picks_count=$(run_d1_query "SELECT COUNT(*) FROM picks;")
new_users_count=$(run_d1_query "SELECT COUNT(*) FROM users;")

print_result "Games count preserved" "$games_count" "$new_games_count"
print_result "Picks count preserved" "$picks_count" "$new_picks_count"
print_result "Users count preserved" "$users_count" "$new_users_count"

# Check new table created
game_locks_count=$(run_d1_query "SELECT COUNT(*) FROM game_locks;")
echo -e "${GREEN}âœ“ game_locks table created with $game_locks_count entries${NC}"

# Verify new columns exist in games table
games_with_lock_time=$(run_d1_query "SELECT COUNT(*) FROM games WHERE lockTime IS NOT NULL;")
games_with_status=$(run_d1_query "SELECT COUNT(*) FROM games WHERE status IS NOT NULL;")

print_result "Games have lockTime" "$games_count" "$games_with_lock_time"
print_result "Games have status" "$games_count" "$games_with_status"

# Check picks table enhancements
picks_with_is_locked=$(run_d1_query "SELECT COUNT(*) FROM picks WHERE isLocked IS NOT NULL;")
print_result "Picks have isLocked field" "$picks_count" "$picks_with_is_locked"

# Verify indexes were created
time_lock_indexes=$(run_d1_query "SELECT COUNT(name) FROM sqlite_master WHERE type='index' AND name LIKE 'idx_games_lock_time%';")
print_result "Time-lock indexes created" "1" "$time_lock_indexes"

echo -e "\n${YELLOW}Step 4: Data Logic Validation${NC}"
echo "=============================="

# Check status distribution
echo "Game status distribution:"
run_d1_query "SELECT status, COUNT(*) as count FROM games GROUP BY status;" | while read line; do
    echo "  $line"
done

# Check lock status distribution
echo "Pick lock status distribution:"
run_d1_query "SELECT isLocked, COUNT(*) as count FROM picks GROUP BY isLocked;" | while read line; do
    echo "  $line"
done

# Test time-based queries
upcoming_games=$(run_d1_query "SELECT COUNT(*) FROM games WHERE status = 'upcoming';")
locked_games=$(run_d1_query "SELECT COUNT(*) FROM games WHERE status = 'locked';")

echo -e "${GREEN}âœ“ Found $upcoming_games upcoming games${NC}"
echo -e "${GREEN}âœ“ Found $locked_games locked games${NC}"

echo -e "\n${YELLOW}Step 5: Performance Test${NC}"
echo "======================="

# Test index performance with EXPLAIN QUERY PLAN
echo "Testing time-based query performance:"
run_d1_query "EXPLAIN QUERY PLAN SELECT * FROM games WHERE status = 'upcoming' AND datetime(lockTime) <= datetime('now');" | head -n 1

echo -e "\n${YELLOW}Step 6: Schema Validation${NC}"
echo "========================="

# Verify table structures
echo "Games table structure:"
run_d1_query "PRAGMA table_info(games);" | grep -E "(lockTime|status)" || echo "New fields not found"

echo "Picks table structure:"  
run_d1_query "PRAGMA table_info(picks);" | grep -E "(lockedAt|isLocked|autoGenerated)" || echo "New fields not found"

echo "game_locks table structure:"
run_d1_query "PRAGMA table_info(game_locks);" | head -n 3

echo -e "\n${GREEN}ðŸŽ‰ Migration Test Completed Successfully!${NC}"
echo "==========================================="

# Summary
echo "Summary:"
echo "- âœ“ Data integrity preserved"
echo "- âœ“ New tables and columns created" 
echo "- âœ“ Indexes created for performance"
echo "- âœ“ Time-based logic working"
echo "- âœ“ Schema validates correctly"

echo -e "\n${YELLOW}Next Steps:${NC}"
echo "- Update API endpoints to use new fields"
echo "- Implement pick validation logic"
echo "- Set up Cloudflare Cron triggers"
echo "- Update frontend UI for lock status"

echo -e "\n${YELLOW}To rollback (if needed):${NC}"
echo "wrangler d1 execute nfl-pickem-db --local --file=migrations/001_rollback_time_lock_fields.sql"