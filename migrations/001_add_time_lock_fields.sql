-- Migration Script: Add Time-Lock Fields (Sprint 1)
-- This script adds time-lock functionality to the existing database
-- Run with: wrangler d1 execute nfl-pickem-db --file=migrations/001_add_time_lock_fields.sql

-- Step 1: Add new columns to games table
ALTER TABLE games ADD COLUMN lockTime TEXT;
ALTER TABLE games ADD COLUMN status TEXT DEFAULT 'upcoming' CHECK (status IN ('upcoming', 'locked', 'in_progress', 'final'));

-- Step 2: Set lockTime to gameDate for existing games (can be updated later with actual kickoff times)
UPDATE games SET lockTime = gameDate WHERE lockTime IS NULL;

-- Step 3: Make lockTime NOT NULL after populating it
-- Note: SQLite doesn't support ALTER COLUMN, so this is handled via application logic

-- Step 4: Add new columns to picks table
ALTER TABLE picks ADD COLUMN lockedAt TEXT;
ALTER TABLE picks ADD COLUMN isLocked BOOLEAN DEFAULT 0;
ALTER TABLE picks ADD COLUMN autoGenerated BOOLEAN DEFAULT 0;

-- Step 5: Create game_locks table
CREATE TABLE IF NOT EXISTS game_locks (
  id TEXT PRIMARY KEY,
  gameId TEXT NOT NULL UNIQUE,
  lockTime TEXT NOT NULL,
  isLocked BOOLEAN DEFAULT 0,
  lastChecked TEXT NOT NULL DEFAULT (datetime('now')),
  autoPicksGenerated BOOLEAN DEFAULT 0,
  createdAt TEXT NOT NULL DEFAULT (datetime('now')),
  updatedAt TEXT NOT NULL DEFAULT (datetime('now')),
  FOREIGN KEY (gameId) REFERENCES games(id)
);

-- Step 6: Populate game_locks table with existing games
INSERT INTO game_locks (id, gameId, lockTime, isLocked, lastChecked, autoPicksGenerated)
SELECT 
  'lock-' || id as id,
  id as gameId,
  lockTime,
  CASE 
    WHEN datetime(lockTime) <= datetime('now') THEN 1 
    ELSE 0 
  END as isLocked,
  datetime('now') as lastChecked,
  0 as autoPicksGenerated
FROM games;

-- Step 7: Update game status based on current time
UPDATE games SET status = 
  CASE 
    WHEN datetime(lockTime) <= datetime('now') AND isCompleted = 0 THEN 'locked'
    WHEN isCompleted = 1 THEN 'final'
    ELSE 'upcoming'
  END;

-- Step 8: Update existing picks to be locked if their game time has passed
UPDATE picks SET 
  isLocked = 1,
  lockedAt = createdAt
WHERE gameId IN (
  SELECT id FROM games WHERE datetime(lockTime) <= datetime('now')
);

-- Step 9: Create time-lock specific indexes
CREATE INDEX IF NOT EXISTS idx_games_lock_time ON games(lockTime);
CREATE INDEX IF NOT EXISTS idx_games_status ON games(status);
CREATE INDEX IF NOT EXISTS idx_games_status_lock_time ON games(status, lockTime);
CREATE INDEX IF NOT EXISTS idx_picks_locked_at ON picks(lockedAt);
CREATE INDEX IF NOT EXISTS idx_picks_is_locked ON picks(isLocked);
CREATE INDEX IF NOT EXISTS idx_picks_auto_generated ON picks(autoGenerated);
CREATE INDEX IF NOT EXISTS idx_picks_user_locked ON picks(userId, isLocked);
CREATE INDEX IF NOT EXISTS idx_game_locks_lock_time ON game_locks(lockTime);
CREATE INDEX IF NOT EXISTS idx_game_locks_is_locked ON game_locks(isLocked);
CREATE INDEX IF NOT EXISTS idx_game_locks_last_checked ON game_locks(lastChecked);
CREATE INDEX IF NOT EXISTS idx_game_locks_auto_picks ON game_locks(autoPicksGenerated);

-- Step 10: Verify migration results (for manual testing)
-- SELECT COUNT(*) as total_games FROM games;
-- SELECT COUNT(*) as games_with_lock_time FROM games WHERE lockTime IS NOT NULL;
-- SELECT COUNT(*) as total_game_locks FROM game_locks;
-- SELECT status, COUNT(*) as count FROM games GROUP BY status;
-- SELECT isLocked, COUNT(*) as count FROM picks GROUP BY isLocked;