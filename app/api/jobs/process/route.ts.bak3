
import { NextRequest, NextResponse } from 'next/server'

export const runtime = 'edge'
import { JobQueue } from '@/lib/jobs/JobQueue'

export async function GET() {
  try {
    const jobQueue = JobQueue.getInstance()
    
    // Start processing if not already running
    jobQueue.startProcessing()
    
    const stats = jobQueue.getStats()
    
    return NextResponse.json({
      success: true,
      message: 'Job processing started',
      stats
    })
    
  } catch (error) {
    console.error('Job process API error:', error)
    return NextResponse.json({
      success: false,
      error: 'Failed to start job processing',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

export async function POST() {
  try {
    const jobQueue = JobQueue.getInstance()
    
    // Force process jobs immediately
    if (!jobQueue['isProcessing']) {
      jobQueue.startProcessing()
    }
    
    const stats = jobQueue.getStats()
    
    return NextResponse.json({
      success: true,
      message: 'Job processing triggered',
      stats
    })
    
  } catch (error) {
    console.error('Job process POST API error:', error)
    return NextResponse.json({
      success: false,
      error: 'Failed to trigger job processing',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

export async function DELETE() {
  try {
    const jobQueue = JobQueue.getInstance()
    
    // Stop job processing
    jobQueue.stopProcessing()
    
    return NextResponse.json({
      success: true,
      message: 'Job processing stopped'
    })
    
  } catch (error) {
    console.error('Job process DELETE API error:', error)
    return NextResponse.json({
      success: false,
      error: 'Failed to stop job processing',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}