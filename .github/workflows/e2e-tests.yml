name: E2E Tests - NFL Pick'em App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC to catch production issues
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ~/.cache/playwright

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        project: [
          'chromium',
          'firefox', 
          'webkit',
          'Mobile Chrome',
          'Mobile Safari'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build frontend
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start local servers for testing
        run: |
          # Start frontend dev server in background
          npm run dev &
          DEV_PID=$!
          echo "DEV_PID=$DEV_PID" >> $GITHUB_ENV
          
          # Start workers dev server in background  
          npm run workers:dev &
          WORKERS_PID=$!
          echo "WORKERS_PID=$WORKERS_PID" >> $GITHUB_ENV
          
          # Wait for servers to be ready
          npx wait-on http://127.0.0.1:5173 http://127.0.0.1:8787 --timeout 60000

      - name: Run Playwright tests
        run: npx playwright test --project="${{ matrix.project }}"
        env:
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:5173
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.project }}
          path: |
            tests/e2e/results/
            test-results/
          retention-days: 7

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.project }}
          path: playwright-report/
          retention-days: 7

      - name: Stop local servers
        if: always()
        run: |
          if [ ! -z "$DEV_PID" ]; then kill $DEV_PID || true; fi
          if [ ! -z "$WORKERS_PID" ]; then kill $WORKERS_PID || true; fi

  production-smoke-test:
    name: Production Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Run production smoke tests
        run: npx playwright test --project=chromium tests/e2e/auth-navigation.spec.ts
        env:
          PLAYWRIGHT_BASE_URL: https://pickem.leefamilysso.com
          CI: true

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-smoke-test-results
          path: |
            tests/e2e/results/
            test-results/
          retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Generate test summary
        run: |
          echo "# NFL Pick'em E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count successful and failed projects
          TOTAL=0
          SUCCESS=0
          FAILED=0
          
          for project in "chromium" "firefox" "webkit" "Mobile Chrome" "Mobile Safari"; do
            TOTAL=$((TOTAL + 1))
            if [ -d "test-artifacts/playwright-results-$project" ]; then
              echo "✅ $project: Tests completed" >> $GITHUB_STEP_SUMMARY
              SUCCESS=$((SUCCESS + 1))
            else
              echo "❌ $project: Tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
              FAILED=$((FAILED + 1))
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Projects:** $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "**Successful:** $SUCCESS" >> $GITHUB_STEP_SUMMARY  
          echo "**Failed:** $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $FAILED -gt 0 ]; then
            echo "## ⚠️ Test Failures Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some test projects failed. Please check the individual test artifacts for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ All Tests Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All E2E tests completed successfully across all browser projects!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Authentication and Navigation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Game Data Loading and Error Handling" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pick Submission and Validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Time-Lock System Workflow" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Mobile Responsiveness" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cross-Browser Compatibility" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Create Issue on Test Failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 E2E Tests Failed on Main Branch - ${new Date().toISOString().split('T')[0]}`
            const body = `
            ## Test Failure Alert
            
            The E2E tests have failed on the main branch.
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            Please investigate and fix the failing tests as soon as possible.
            
            ### Next Steps:
            1. Review the test artifacts in the failed workflow run
            2. Check for any recent changes that might have broken functionality
            3. Run tests locally to reproduce the issue
            4. Fix the issue and verify tests pass before pushing
            
            This issue will be automatically closed when tests pass again.
            `
            
            // Check if there's already an open issue for test failures
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['e2e-test-failure', 'priority-high']
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['e2e-test-failure', 'priority-high', 'bug']
              });
            }

  close-failure-issue:
    name: Close Test Failure Issue
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Close Test Failure Issues
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['e2e-test-failure']
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ E2E tests are now passing. This issue has been automatically resolved.\n\nWorkflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
              });
            }