name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  THE_ODDS_API_KEY: ${{ secrets.THE_ODDS_API_KEY }}

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run lint
      run: npm run lint

    - name: Run unit tests
      run: npm run test:run

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          coverage/
          test-results.xml
        retention-days: 7

  test-components:
    name: Component Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run component tests
      run: npm run test:components

    - name: Upload component test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: component-test-results
        path: |
          tests/components/results/
        retention-days: 7

  test-worker:
    name: Worker API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      # Use SQLite service for D1 compatibility testing
      sqlite:
        image: nouchka/sqlite3:latest
        options: >-
          --health-cmd "echo 'SELECT 1;' | sqlite3 /tmp/test.db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup Wrangler
      run: npm install -g wrangler@latest

    - name: Run worker tests
      run: npm run test:worker
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: Upload worker test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: worker-test-results
        path: |
          tests/worker/results/
        retention-days: 7

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        mkdir -p ./tests/integration/db
        sqlite3 ./tests/integration/db/test.db < ./migrations/001_initial_schema.sql || true

    - name: Run integration tests
      run: npm run test:integration

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          tests/integration/results/
        retention-days: 7

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npm run playwright:install

    - name: Build application
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        npm run workers:dev &
        sleep 30  # Wait for servers to start

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          tests/e2e/results/
          test-results/
        retention-days: 7

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance tests
      run: npm run test:performance

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          tests/performance/results/
        retention-days: 14

    - name: Performance regression check
      run: |
        if [ -f "tests/performance/results/performance-results.json" ]; then
          node scripts/check-performance-regression.js
        fi

  test-security:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security tests
      run: npm run test:security

    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: |
          tests/security/results/
        retention-days: 30

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-unit, test-components, test-worker, test-integration, test-e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy to Cloudflare Workers
      run: npm run workers:deploy-prod
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: Deploy frontend to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: nfl-pickem-app
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Run post-deployment smoke tests
      run: |
        sleep 30  # Wait for deployment
        curl -f "https://nfl-pickem-app-production.cybermattlee-llc.workers.dev/api/health" || exit 1
        curl -f "https://pickem.leefamilysso.com/" || exit 1

  notify:
    name: Notify Results  
    runs-on: ubuntu-latest
    needs: [test-unit, test-components, test-worker, test-integration, test-e2e, test-performance, test-security, build-and-deploy]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Calculate test summary
      id: test-summary
      run: |
        PASSED=0
        FAILED=0
        
        if [ "${{ needs.test-unit.result }}" == "success" ]; then PASSED=$((PASSED+1)); else FAILED=$((FAILED+1)); fi
        if [ "${{ needs.test-components.result }}" == "success" ]; then PASSED=$((PASSED+1)); else FAILED=$((FAILED+1)); fi
        if [ "${{ needs.test-worker.result }}" == "success" ]; then PASSED=$((PASSED+1)); else FAILED=$((FAILED+1)); fi
        if [ "${{ needs.test-integration.result }}" == "success" ]; then PASSED=$((PASSED+1)); else FAILED=$((FAILED+1)); fi
        if [ "${{ needs.test-e2e.result }}" == "success" ]; then PASSED=$((PASSED+1)); else FAILED=$((FAILED+1)); fi
        if [ "${{ needs.test-performance.result }}" == "success" ]; then PASSED=$((PASSED+1)); else FAILED=$((FAILED+1)); fi
        if [ "${{ needs.test-security.result }}" == "success" ]; then PASSED=$((PASSED+1)); else FAILED=$((FAILED+1)); fi
        
        echo "passed=$PASSED" >> $GITHUB_OUTPUT
        echo "failed=$FAILED" >> $GITHUB_OUTPUT
        
        if [ $FAILED -gt 0 ]; then
          echo "status=❌ FAILED" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        else
          echo "status=✅ PASSED" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        fi

    - name: Create test report
      run: |
        cat > test-report.md << EOF
        # Test Results Summary
        
        **Status:** ${{ steps.test-summary.outputs.status }}
        **Branch:** \`${{ github.ref_name }}\`
        **Commit:** \`${{ github.sha }}\`
        **Passed:** ${{ steps.test-summary.outputs.passed }}
        **Failed:** ${{ steps.test-summary.outputs.failed }}
        
        ## Test Suite Results
        
        - **Unit Tests:** ${{ needs.test-unit.result == 'success' && '✅ Passed' || '❌ Failed' }}
        - **Component Tests:** ${{ needs.test-components.result == 'success' && '✅ Passed' || '❌ Failed' }}
        - **Worker Tests:** ${{ needs.test-worker.result == 'success' && '✅ Passed' || '❌ Failed' }}
        - **Integration Tests:** ${{ needs.test-integration.result == 'success' && '✅ Passed' || '❌ Failed' }}
        - **E2E Tests:** ${{ needs.test-e2e.result == 'success' && '✅ Passed' || '❌ Failed' }}
        - **Performance Tests:** ${{ needs.test-performance.result == 'success' && '✅ Passed' || '❌ Failed' }}
        - **Security Tests:** ${{ needs.test-security.result == 'success' && '✅ Passed' || '❌ Failed' }}
        
        ## Deployment
        
        - **Deployment:** ${{ needs.build-and-deploy.result == 'success' && '✅ Deployed' || (needs.build-and-deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }}
        
        [View full workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        EOF

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('test-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

    - name: Upload final test report
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md
        retention-days: 30