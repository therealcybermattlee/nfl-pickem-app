#!/usr/bin/env node

/**
 * Sprint 3 Automation System Test Script
 * Tests the complete automation workflow in dry-run mode
 */

const WORKER_URL = 'https://nfl-pickem-app-production.cybermattlee-llc.workers.dev'

async function testAutomationSystem() {
  console.log('🧪 Testing Sprint 3 Game State Automation System')
  console.log(`📡 Worker URL: ${WORKER_URL}`)
  console.log()

  const tests = [
    {
      name: 'System Logs API',
      test: async () => {
        const response = await fetch(`${WORKER_URL}/api/system/logs?limit=5`)
        const data = await response.json()
        return { success: response.ok, data: data.count >= 0 ? `${data.count} logs found` : 'No logs' }
      }
    },
    {
      name: 'System Metrics API', 
      test: async () => {
        const response = await fetch(`${WORKER_URL}/api/system/metrics?hours=24`)
        const data = await response.json()
        return { success: response.ok, data: data.metrics ? `${data.metrics.length} metric groups` : 'No metrics' }
      }
    },
    {
      name: 'Manual Automation Trigger (Dry-Run)',
      test: async () => {
        const response = await fetch(`${WORKER_URL}/api/automation/trigger`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ dryRun: true })
        })
        const data = await response.json()
        return { 
          success: response.ok, 
          data: data.success ? `✅ ${data.message}` : `❌ ${data.error}` 
        }
      }
    },
    {
      name: 'Game Status API',
      test: async () => {
        const response = await fetch(`${WORKER_URL}/api/games/status?week=1&season=2025`)
        const data = await response.json()
        return { success: response.ok, data: `${data.games?.length || 0} games found` }
      }
    },
    {
      name: 'Games Lock Update API',
      test: async () => {
        const response = await fetch(`${WORKER_URL}/api/games/update-locks`, {
          method: 'POST'
        })
        const data = await response.json()
        return { 
          success: response.ok, 
          data: `${data.newlyLockedGames || 0} games would be locked` 
        }
      }
    },
    {
      name: 'Auto-Generate Picks API',
      test: async () => {
        const response = await fetch(`${WORKER_URL}/api/picks/auto-generate`, {
          method: 'POST'
        })
        const data = await response.json()
        return { 
          success: response.ok, 
          data: `${data.autoGeneratedCount || 0} picks would be generated` 
        }
      }
    }
  ]

  let passed = 0
  let failed = 0

  for (const test of tests) {
    try {
      process.stdout.write(`🔍 ${test.name}... `)
      const result = await test.test()
      
      if (result.success) {
        console.log(`✅ PASS - ${result.data}`)
        passed++
      } else {
        console.log(`❌ FAIL - ${result.data}`)
        failed++
      }
    } catch (error) {
      console.log(`💥 ERROR - ${error.message}`)
      failed++
    }
  }

  console.log()
  console.log(`📊 Test Results: ${passed} passed, ${failed} failed`)
  
  if (failed === 0) {
    console.log('🎉 All automation tests passed! System is ready for production.')
  } else {
    console.log('⚠️  Some tests failed. Check worker deployment and D1 database.')
  }

  console.log()
  console.log('🚀 Next steps:')
  console.log('  1. Deploy: wrangler deploy --env production')
  console.log('  2. Monitor: wrangler tail --env production') 
  console.log('  3. Test live: curl -X POST [worker-url]/api/automation/trigger -d \'{"dryRun": true}\'')
  console.log('  4. Check logs: curl [worker-url]/api/system/logs')
}

// Run the test
testAutomationSystem().catch(error => {
  console.error('Test script failed:', error)
  process.exit(1)
})