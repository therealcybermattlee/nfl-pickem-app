import { vi } from 'vitest'

// Mock Cloudflare Workers runtime environment
declare global {
  const MINIFLARE: any
}

// Setup Cloudflare Workers testing environment
export async function setupWorkerEnvironment() {
  // Mock D1 Database
  const mockD1 = {
    prepare: vi.fn().mockReturnValue({
      bind: vi.fn().mockReturnValue({
        all: vi.fn(),
        first: vi.fn(),
        run: vi.fn()
      })
    }),
    exec: vi.fn()
  }

  // Mock environment variables
  const mockEnv = {
    DB: mockD1,
    NEXTAUTH_SECRET: 'test-secret-key-for-jwt-signing',
    THE_ODDS_API_KEY: 'test-odds-api-key',
    NEXTAUTH_URL: 'http://localhost:3000',
    THE_ODDS_API_BASE_URL: 'https://api.the-odds-api.com/v4',
    CURRENT_NFL_SEASON: '2025',
    CURRENT_NFL_WEEK: '1'
  }

  // Mock Workers runtime globals
  global.Request = global.Request || class MockRequest {
    constructor(public url: string, public init?: RequestInit) {}
    async json() { return JSON.parse(this.init?.body as string || '{}') }
    async text() { return this.init?.body as string || '' }
  }

  global.Response = global.Response || class MockResponse {
    constructor(public body?: string, public init?: ResponseInit) {}
    get status() { return this.init?.status || 200 }
    get headers() { return new Headers(this.init?.headers) }
    async json() { return JSON.parse(this.body || '{}') }
    async text() { return this.body || '' }
  }

  global.Headers = global.Headers || class MockHeaders extends Map {
    get(key: string) { return super.get(key.toLowerCase()) }
    set(key: string, value: string) { return super.set(key.toLowerCase(), value) }
  }

  // Mock fetch for external API calls
  global.fetch = vi.fn()

  // Mock crypto for UUID generation and JWT
  global.crypto = {
    randomUUID: vi.fn(() => 'test-uuid-1234-5678-9012-345678901234'),
    subtle: {
      sign: vi.fn(),
      verify: vi.fn(),
      importKey: vi.fn()
    }
  } as any

  return { mockEnv, mockD1 }
}

// Common test fixtures
export const testFixtures = {
  users: [
    {
      id: 'test-user-123',
      email: 'test@example.com',
      name: 'Test User',
      displayName: 'Test User'
    },
    {
      id: 'test-user-456', 
      email: 'test2@example.com',
      name: 'Test User 2',
      displayName: 'Test User 2'
    }
  ],
  
  teams: [
    {
      id: 'team-home-123',
      name: 'Home Team',
      displayName: 'Home Team',
      abbreviation: 'HOME',
      conference: 'AFC',
      division: 'North'
    },
    {
      id: 'team-away-456',
      name: 'Away Team', 
      displayName: 'Away Team',
      abbreviation: 'AWAY',
      conference: 'NFC',
      division: 'South'
    }
  ],
  
  games: [
    {
      id: 'game-upcoming-123',
      espnId: 'espn-123',
      week: 1,
      season: 2025,
      homeTeamId: 'team-home-123',
      awayTeamId: 'team-away-456',
      gameTime: '2025-09-07T17:00:00.000Z', // 5 PM UTC
      gameDate: '2025-09-07',
      lockTime: '2025-09-07T16:00:00.000Z', // 1 hour before game
      status: 'upcoming',
      isCompleted: false
    },
    {
      id: 'game-locked-456',
      espnId: 'espn-456',
      week: 1,
      season: 2025,
      homeTeamId: 'team-home-123',
      awayTeamId: 'team-away-456',
      gameTime: '2025-09-07T13:00:00.000Z', // 1 PM UTC (1 hour past current time)
      gameDate: '2025-09-07',
      lockTime: '2025-09-07T11:00:00.000Z', // 1 hour before game (1 hour ago)
      status: 'locked',
      isCompleted: false
    }
  ],
  
  picks: [
    {
      id: 'pick-123',
      userId: 'test-user-123',
      gameId: 'game-upcoming-123',
      teamId: 'team-home-123',
      points: 1,
      isLocked: false,
      autoGenerated: false,
      createdAt: '2025-09-07T10:00:00.000Z',
      updatedAt: '2025-09-07T10:00:00.000Z'
    }
  ]
}

// Database mock helpers
export function createMockDatabaseResponses(mockD1: any, fixtures = testFixtures) {
  // Mock user queries
  mockD1.prepare.mockImplementation((query: string) => {
    const mockResult = {
      bind: vi.fn().mockReturnValue({
        all: vi.fn().mockResolvedValue({
          results: [],
          success: true,
          meta: {}
        }),
        first: vi.fn().mockResolvedValue(null),
        run: vi.fn().mockResolvedValue({
          success: true,
          meta: { changes: 1, last_row_id: 1, duration: 10 }
        })
      })
    }

    // Customize responses based on query
    if (query.includes('SELECT') && query.includes('users')) {
      mockResult.bind().all.mockResolvedValue({
        results: fixtures.users,
        success: true,
        meta: {}
      })
    }
    
    if (query.includes('SELECT') && query.includes('teams')) {
      mockResult.bind().all.mockResolvedValue({
        results: fixtures.teams,
        success: true,
        meta: {}
      })
    }
    
    if (query.includes('SELECT') && query.includes('games')) {
      mockResult.bind().all.mockResolvedValue({
        results: fixtures.games,
        success: true,
        meta: {}
      })
    }
    
    if (query.includes('SELECT') && query.includes('picks')) {
      mockResult.bind().all.mockResolvedValue({
        results: fixtures.picks,
        success: true,
        meta: {}
      })
    }
    
    return mockResult
  })
  
  return mockD1
}

// ESPN API mock responses
export const mockEspnResponses = {
  success: {
    events: [
      {
        id: 'espn-123',
        name: 'Away Team at Home Team',
        date: '2025-09-07T17:00:00Z',
        competitions: [{
          id: 'comp-123',
          competitors: [
            {
              id: 'team-home',
              team: { id: '1', displayName: 'Home Team', abbreviation: 'HOME' },
              homeAway: 'home',
              score: '0'
            },
            {
              id: 'team-away', 
              team: { id: '2', displayName: 'Away Team', abbreviation: 'AWAY' },
              homeAway: 'away',
              score: '0'
            }
          ],
          odds: [{
            details: 'Home -3.5',
            overUnder: 47.5
          }],
          status: {
            type: { id: '1', name: 'scheduled' }
          }
        }]
      }
    ]
  },
  
  error: {
    error: 'ESPN API unavailable'
  }
}

// Test JWT tokens
export function createTestJWT(payload: any = {}) {
  const defaultPayload = {
    sub: 'test-user-123',
    email: 'test@example.com',
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + 3600 // 1 hour
  }
  
  // In real implementation, this would be properly signed
  // For tests, we just return a mock token
  return 'test.jwt.token.' + btoa(JSON.stringify({ ...defaultPayload, ...payload }))
}

export function createExpiredTestJWT() {
  return createTestJWT({
    exp: Math.floor(Date.now() / 1000) - 3600 // 1 hour ago
  })
}

// Time manipulation helpers
export function setMockTime(isoString: string) {
  const time = new Date(isoString).getTime()
  vi.setSystemTime(time)
  return time
}

export function advanceMockTime(milliseconds: number) {
  const currentTime = Date.now()
  vi.setSystemTime(currentTime + milliseconds)
  return currentTime + milliseconds
}