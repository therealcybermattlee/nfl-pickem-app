generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin       Boolean   @default(false)

  // Relations
  accounts        Account[]
  sessions        Session[]
  picks           Pick[]
  poolMemberships PoolMember[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Pool {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  inviteCode  String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  // Relations
  members PoolMember[]
  weeks   PoolWeek[]

  @@map("pools")
}

model PoolMember {
  id     String @id @default(cuid())
  userId String
  poolId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pool Pool @relation(fields: [poolId], references: [id], onDelete: Cascade)

  @@unique([userId, poolId])
  @@map("pool_members")
}

model PoolWeek {
  id       String @id @default(cuid())
  poolId   String
  week     Int
  season   Int
  isActive Boolean @default(false)

  pool Pool @relation(fields: [poolId], references: [id], onDelete: Cascade)

  @@unique([poolId, week, season])
  @@map("pool_weeks")
}

model Team {
  id           String @id @default(cuid())
  name         String
  displayName  String
  abbreviation String @unique
  logo         String?
  color        String?
  
  homeGames Game[] @relation("HomeTeam")
  awayGames Game[] @relation("AwayTeam")
  picks     Pick[]

  @@map("teams")
}

model Game {
  id          String   @id @default(cuid())
  espnId      String?  @unique
  week        Int
  season      Int
  homeTeamId  String
  awayTeamId  String
  gameDate    DateTime
  isCompleted Boolean  @default(false)
  homeScore   Int?
  awayScore   Int?
  winnerTeamId String?
  
  // Odds fields
  homeSpread      Float?
  awaySpread      Float?
  homeMoneyline   Int?
  awayMoneyline   Int?
  overUnder       Float?
  oddsProvider    String?
  oddsUpdatedAt   DateTime?

  homeTeam Team @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam Team @relation("AwayTeam", fields: [awayTeamId], references: [id])
  
  picks Pick[]
  oddsHistory OddsHistory[]

  @@unique([week, season, homeTeamId, awayTeamId])
  @@map("games")
}

model Pick {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  teamId    String
  points    Int?
  isCorrect Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, gameId])
  @@map("picks")
}

model OddsHistory {
  id              String   @id @default(cuid())
  gameId          String
  homeSpread      Float?
  awaySpread      Float?
  homeMoneyline   Int?
  awayMoneyline   Int?
  overUnder       Float?
  provider        String
  timestamp       DateTime @default(now())
  
  game            Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@index([gameId, timestamp])
  @@map("odds_history")
}

model Cache {
  id              String   @id @default(cuid())
  key             String   @unique
  data            String   // JSON serialized data
  expiresAt       DateTime
  version         Int      @default(1)
  tags            String?  // Comma-separated tags
  hitCount        Int      @default(0)
  createdAt       DateTime @default(now())
  lastAccessedAt  DateTime @default(now())
  
  @@index([key])
  @@index([expiresAt])
  @@index([tags])
  @@map("cache")
}